{"version":3,"sources":["../../src/aws/BucketService.js"],"names":["fs","require","path","S3Key","AbstractService","UploadService","keyPath","filename","value","join","plugin","getBucketLayersPath","test","process","platform","replace","uploadZipFile","log","params","Bucket","bucketName","Key","zipFileKeyName","Body","createReadStream","getPathZipFileName","provider","request","then","result","catch","e","console","message","exit","putFile","body","file","getStream","getKey","getFile","toString","uploadDependencesFile","dependenciesPath","settings","dependenceFilename","downloadDependencesFile","module","exports"],"mappings":"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","sourcesContent":["const fs = require('fs');\nconst path = require('path');\n\nconst S3Key = require('./S3Key');\nconst AbstractService = require('../AbstractService');\n\nclass UploadService extends AbstractService {\n  keyPath(filename) {\n    let value = path.join(this.plugin.getBucketLayersPath(), filename);\n    if (/^win/.test(process.platform)) {\n      value = value.replace(/\\\\/g, '/');\n    }\n    return value;\n  }\n\n  async uploadZipFile() {\n    this.plugin.log('Uploading layer package...');\n\n    const params = {\n      Bucket: this.bucketName,\n      Key: this.zipFileKeyName,\n      Body: fs.createReadStream(this.plugin.getPathZipFileName())\n    };\n\n    return this.provider.request('S3', 'putObject', params)\n      .then((result) => {\n        this.plugin.log('OK...');\n        return result;\n      })\n      .catch(e => {\n        console.log(e.message);\n        process.exit(1);\n      });\n  }\n\n  async putFile(filename, body) {\n    const file = new S3Key(filename);\n    this.plugin.log(`Uploading remote ${filename}...`);\n\n    let Body = body;\n\n    if (!body) {\n      Body = file.getStream();\n    }\n\n    const params = {\n      Body,\n      Bucket: this.bucketName,\n      Key: this.keyPath(file.getKey())\n    };\n\n    return this.provider.request('S3', 'putObject', params)\n      .then((result) => {\n        this.plugin.log('OK...');\n        return result;\n      })\n      .catch(e => {\n        console.log(e.message);\n        process.exit(1);\n      });\n  }\n\n  async getFile(filename) {\n    const file = new S3Key(filename);\n    this.plugin.log(`Downloading ${file.getKey()} from bucket...`);\n\n    const params = {\n      Bucket: this.bucketName,\n      Key: this.keyPath(file.getKey())\n    };\n\n    return this.provider.request('S3', 'getObject', params)\n      .then((result) => result.Body.toString())\n      .catch(() => {\n        this.plugin.log(`${filename} does not exists at bucket...`);\n        return null;\n      });\n  }\n\n  async uploadDependencesFile() {\n    const { dependenciesPath } = this.plugin.settings;\n\n    this.plugin.log(`Uploading remote ${dependenciesPath}...`);\n\n    const params = {\n      Bucket: this.bucketName,\n      Key: this.dependenceFilename,\n      Body: fs.createReadStream(this.plugin.settings.dependenciesPath)\n    };\n\n    return this.provider.request('S3', 'putObject', params)\n      .then((result) => {\n        this.plugin.log('OK...');\n        return result;\n      })\n      .catch(e => {\n        console.log(e.message);\n        process.exit(1);\n      });\n  }\n\n  async downloadDependencesFile() {\n    const { dependenciesPath } = this.plugin.settings;\n    this.plugin.log(`Downloading ${dependenciesPath} from bucket...`);\n\n    const params = {\n      Bucket: this.bucketName,\n      Key: this.dependenceFilename\n    };\n\n    return this.provider.request('S3', 'getObject', params)\n      .then((result) => result.Body.toString())\n      .catch(() => {\n        this.plugin.log(`${dependenciesPath} does not exists at bucket...`);\n        return null;\n      });\n  }\n}\n\nmodule.exports = UploadService;\n"],"file":"BucketService.js"}