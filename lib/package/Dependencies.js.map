{"version":3,"sources":["../../src/package/Dependencies.js"],"names":["fs","require","chalk","fsExtra","glob","path","mkdirp","execSync","copyFile","AbstractService","resolveFile","from","Promise","resolve","reject","err","files","Dependencies","init","layersPackageDir","getLayerPackageDir","sync","getDepsPath","settings","plugin","rooPath","join","dependenciesPath","run","cmd","output","cwd","env","process","maxBuffer","toString","copyProjectFile","filePath","fileName","existsSync","warn","destFile","basename","copyErr","install","copyBeforeInstall","copyAfterInstall","log","inverse","yellow","renameFilename","runtimeDir","index","filename","customInstallationCommand","console","white","commands","runtimes","getCommands","packageManager","pathTo","to","pathFrom","copy","e","module","exports"],"mappings":"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","sourcesContent":["const fs = require('fs');\nconst chalk = require('chalk');\nconst fsExtra = require('fs-extra');\nconst glob = require('glob');\nconst path = require('path');\nconst mkdirp = require('mkdirp');\nconst { execSync } = require('child_process');\nconst copyFile = require('fs-copy-file'); // node v6.10.3 support\n\nconst AbstractService = require('../AbstractService');\n\nfunction resolveFile(from) {\n  return new Promise((resolve, reject) => {\n    glob(from, {}, (err, files) => {\n      if (err) return reject();\n      return resolve(files);\n    });\n  });\n}\n\nclass Dependencies extends AbstractService {\n  init() {\n    this.layersPackageDir = this.getLayerPackageDir();\n    return mkdirp.sync(this.layersPackageDir);\n  }\n\n  getDepsPath() {\n    const { settings } = this.plugin;\n    const rooPath = path.join(settings.path, settings.dependenciesPath);\n\n    return path.resolve(rooPath);\n  }\n\n  async run(cmd) {\n    const output = execSync(cmd, {\n      cwd: this.layersPackageDir,\n      env: process.env,\n      maxBuffer: 1024 * 1024 * 500\n    }).toString();\n    return output;\n  }\n\n  copyProjectFile(filePath, fileName = null) {\n    this.init();\n\n    if (!fs.existsSync(filePath)) {\n      this.plugin.warn(`[warning] \"${filePath}\" file does not exists!`);\n      return true;\n    }\n\n    return new Promise((resolve) => {\n      const destFile = path.join(this.layersPackageDir, fileName || path.basename(filePath));\n      copyFile(filePath, destFile, (copyErr) => {\n        if (copyErr) throw copyErr;\n        return resolve();\n      });\n    });\n  }\n\n  async install() {\n    const { copyBeforeInstall, copyAfterInstall } = this.plugin.settings;\n\n    this.init();\n    this.plugin.log(`${chalk.inverse.yellow(' Changes identified ')}! Re-installing...`);\n\n    /**\n     * This is necessary because npm is\n     * not possible to specify a custom\n     * name for package.json.\n     */\n    let renameFilename = null;\n    if (this.plugin.settings.runtimeDir === 'nodejs') {\n      renameFilename = 'package.json';\n    }\n\n    await this.copyProjectFile(this.getDepsPath(), renameFilename);\n\n    for (const index in copyBeforeInstall) {\n      const filename = copyBeforeInstall[index];\n      await this.copyProjectFile(filename);\n    }\n\n    // custom commands\n    if (this.plugin.settings.customInstallationCommand) {\n      console.log(chalk.white(await this.run(this.plugin.settings.customInstallationCommand)));\n    } else {\n      const commands = this.plugin.runtimes.getCommands();\n      console.log(chalk.white(await this.run(commands[this.plugin.settings.packageManager])));\n    }\n\n    for (const index in copyAfterInstall) {\n      const pathTo = copyAfterInstall[index].to;\n      const pathFrom = copyAfterInstall[index].from;\n\n      const [from] = await resolveFile(path.join(this.layersPackageDir, pathFrom));\n      const to = path.join(this.layersPackageDir, pathTo);\n\n      try {\n        await fsExtra.copy(from, to);\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  }\n}\n\nmodule.exports = Dependencies;\n"],"file":"Dependencies.js"}